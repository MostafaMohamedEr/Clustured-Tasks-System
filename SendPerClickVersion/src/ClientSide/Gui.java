/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ClientSide;

import LogicalSwitch.LogicalClientInterface;
import LogicalSwitch.Task;
import java.rmi.AccessException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Mostafa
 */
public class Gui extends javax.swing.JFrame {

    Random numberGenrator;
    ArrayList<Task> tasksArray;
    int taskCounter;
    String solvedTasksString;

    /**
     * Creates new form Gui
     */
    public Gui() {
        initComponents();
        numberGenrator = new Random();
        taskCounter = 0;
        solvedTasksString = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Generate Tasks");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Clear Generator");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel1.setText("Client Window");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(32, 32, 32))
            .addGroup(layout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addComponent(jLabel1)
                .addGap(0, 396, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(97, 97, 97)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(9, 9, 9)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(88, 88, 88))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Random numberGenrator = new Random();
        tasksArray = new ArrayList<Task>();
        //Getting logicalSwitchInterface
        Registry reg;
        try {
            reg = LocateRegistry.getRegistry("localhost", 2000);
            LogicalClientInterface Cli = (LogicalClientInterface) reg.lookup("solvingTasks");
            //Check if the three workers is connected
            if (Cli.checkWorkers() < 3) {
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "Three workers must be connected then run client again");
                System.exit(0);
            } else if (Cli.checkWorkers() > 3) {
                this.setVisible(false);
                JOptionPane.showMessageDialog(null, "There is worker that is built twice , please close one of them");
                System.exit(0);
            }
            //Generating randomly number of tasks that required to implement per press (number of tasks between 0:50)
            int numberOfTasks = numberGenrator.nextInt(50);
            // looping for number of tasks to create task parameters 
            for (int i = taskCounter; i < numberOfTasks + taskCounter; i++) {
                //Generate Type between {0,1,2} than adds 1 to be in range{1,2,3}
                int type = numberGenrator.nextInt(3) + 1;
                //Then Genrating numbers that will be solved in the function
                //If type 2 then function requires 3 numbers
                if (type == 2) {
                    int start = numberGenrator.nextInt(1000);
                    int end = numberGenrator.nextInt(1000);
                    //conditions to ensure that end is bigger than start, so it won't inifinte loop
                    while (end < 10) {
                        end = numberGenrator.nextInt(1000);
                    }
                    while (start == end || start > end) {
                        start = numberGenrator.nextInt(1000);
                    }
                    int incremental = numberGenrator.nextInt(10);
                    //Condition to ensure that incremntal >0
                    while (incremental <= 0) {
                        incremental = numberGenrator.nextInt(10);
                    }
                    int arr[] = {start, end, incremental};
                    Task t = new Task(i + 1, type, arr);
                    tasksArray.add(t);
                } else {
                    //In case type 1 or 3 function requires only 1 number
                    int number = numberGenrator.nextInt(1000);
                    int arr[] = {number};
                    Task t = new Task(i + 1, type, arr);
                    tasksArray.add(t);
                }
            }
            taskCounter += numberOfTasks;
            //Array of tasks now is ready
            //Sending array id tasks to logicalSwitch
            Cli.TasksArrayToLogical(tasksArray);
            //Updating stauts of client Gui
            jTextArea1.setText("Tasks are Sent Succefully and waiting for solving it");
            jLabel2.setText("Number of generated tasks is " + (taskCounter));
            //waiting all tasks to be solved and sent from logical
            ArrayList<Task> updatedArray;
            do {
                updatedArray = Cli.returnTaskResultToClient();
            } while (updatedArray == null);
            //Then looping over array to print all results
            for (Task t : updatedArray) {
                solvedTasksString += t.toString();
            }
            jTextArea1.setText(solvedTasksString);
        } catch (RemoteException ex) {
            //Showing window in case of running Client before logical switch
            this.setVisible(false);
            JOptionPane.showMessageDialog(null, "You Should run Logical Switch then Worker 1,2,3 then Client");
            System.exit(0);
        } catch (NotBoundException ex) {
            Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        //When pressing clear Button
        //it reset task id counter to 0 and clear window that shows tasks results
        taskCounter = 0;
        jTextArea1.setText("");
        jLabel2.setText("Number of generated tasks is " + (taskCounter));
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
